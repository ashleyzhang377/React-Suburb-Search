{"ast":null,"code":"var _jsxFileName = \"/Users/xiaotengzhang/Desktop/Se/codingExercise/my-app/src/components/Input/Input.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { Box } from \"@mui/system\";\nimport \"./Input.css\";\nimport { ResultsList } from \"../ResultsList/ResultsList\";\nimport axios from \"axios\";\nimport { Input, Card } from \"antd\";\n\n/**\n * <Input\n *   className=\"MyInput\"\n *   data-something=\"Value\"\n *   value=\"Hello, World!\"\n *   onChange={(value) => console.log('You typed', value)}\n * />\n *\n * @prop {string} value The default value for the input.\n * @prop {string} placeholder The placeholder text.\n * @prop {Function} onChange Callback that will receive current input value.\n * @prop {mixed} ... All other props will be forwarded to the native DOM input.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function InputValue() {\n  _s();\n  // const { className, value, onChange, ...otherProps } = props;\n  // const [inputValue, setInputValue] = useState(value);\n\n  const [suburbs, setSuburbs] = useState([]);\n  const [suburbsMatch, setSuburbsMatch] = useState([]);\n  useEffect(() => {\n    const loadSuburbs = async () => {\n      const response = await axios.get('https://restcountries.eu/rest/v2/all');\n      setInputValue(response.data);\n    };\n    loadSuburbs();\n  }, []);\n\n  // Keep the current value, unless the parent component supplies a different \"value\" prop.\n  // useEffect(() => {\n  //   setInputValue(value);\n  // }, [value]);\n\n  // function handleChange(event) {\n  //   setInputValue(event.target.value);\n  //   onChange && onChange(event.target.value);\n  // }\n\n  console.log(suburbs);\n  const searchSuburbs = text => {\n    let matches = suburbs.filter(suburb => {\n      const regex = new RegExp(`${text}`, \"gi\");\n      return suburb.name.match(regex) || suburb.capital.match(regex);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Suburb\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"Input \" + (className || \"\"),\n      type: \"text\",\n      value: inputValue,\n      placeholder: \"ABC Suburb Search\"\n      // onChange={handleChange}\n      ,\n      onChange: e => searchSuburbs(e.target.value),\n      ...otherProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(InputValue, \"qTch0VWI83pRV6z3T3tV6WJ9Nmk=\");\n_c = InputValue;\nvar _c;\n$RefreshReg$(_c, \"InputValue\");","map":{"version":3,"names":["React","useState","useEffect","TextField","Autocomplete","Box","ResultsList","axios","Input","Card","InputValue","suburbs","setSuburbs","suburbsMatch","setSuburbsMatch","loadSuburbs","response","get","setInputValue","data","console","log","searchSuburbs","text","matches","filter","suburb","regex","RegExp","name","match","capital","className","inputValue","e","target","value","otherProps"],"sources":["/Users/xiaotengzhang/Desktop/Se/codingExercise/my-app/src/components/Input/Input.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { Box } from \"@mui/system\";\nimport \"./Input.css\";\nimport { ResultsList } from \"../ResultsList/ResultsList\"\n\nimport axios from \"axios\";\nimport { Input, Card } from \"antd\";\n\n/**\n * <Input\n *   className=\"MyInput\"\n *   data-something=\"Value\"\n *   value=\"Hello, World!\"\n *   onChange={(value) => console.log('You typed', value)}\n * />\n *\n * @prop {string} value The default value for the input.\n * @prop {string} placeholder The placeholder text.\n * @prop {Function} onChange Callback that will receive current input value.\n * @prop {mixed} ... All other props will be forwarded to the native DOM input.\n */\nexport function InputValue() {\n  // const { className, value, onChange, ...otherProps } = props;\n  // const [inputValue, setInputValue] = useState(value);\n\n  const [suburbs, setSuburbs] = useState([]);\n  const [suburbsMatch, setSuburbsMatch] = useState([]);\n\n  useEffect(() => {\n    const loadSuburbs = async() => {\n      const response = await axios.get('https://restcountries.eu/rest/v2/all');\n      setInputValue(response.data);\n    };\n\n    loadSuburbs();\n  }, [])\n\n\n  // Keep the current value, unless the parent component supplies a different \"value\" prop.\n  // useEffect(() => {\n  //   setInputValue(value);\n  // }, [value]);\n\n  // function handleChange(event) {\n  //   setInputValue(event.target.value);\n  //   onChange && onChange(event.target.value);\n  // }\n\n  console.log(suburbs);\n\n  const searchSuburbs = (text) => {\n    let matches = suburbs.filter((suburb) => {\n      const regex = new RegExp(`${text}`, \"gi\");\n      return suburb.name.match(regex) || suburb.capital.match(regex)\n    })\n  };\n\n  return (\n    <div>\n    <h2>Suburb</h2>\n    <input\n      className={\"Input \" + (className || \"\")}\n      type=\"text\"\n      value={inputValue}\n      placeholder=\"ABC Suburb Search\"\n      // onChange={handleChange}\n      onChange={(e) => searchSuburbs(e.target.value)}\n      {...otherProps}\n    />\n\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,YAAY,MAAM,4BAA4B;AACrD,SAASC,GAAG,QAAQ,aAAa;AACjC,OAAO,aAAa;AACpB,SAASC,WAAW,QAAQ,4BAA4B;AAExD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,IAAI,QAAQ,MAAM;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAaA,OAAO,SAASC,UAAU,GAAG;EAAA;EAC3B;EACA;;EAEA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd,MAAMa,WAAW,GAAG,YAAW;MAC7B,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,sCAAsC,CAAC;MACxEC,aAAa,CAACF,QAAQ,CAACG,IAAI,CAAC;IAC9B,CAAC;IAEDJ,WAAW,EAAE;EACf,CAAC,EAAE,EAAE,CAAC;;EAGN;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEAK,OAAO,CAACC,GAAG,CAACV,OAAO,CAAC;EAEpB,MAAMW,aAAa,GAAIC,IAAI,IAAK;IAC9B,IAAIC,OAAO,GAAGb,OAAO,CAACc,MAAM,CAAEC,MAAM,IAAK;MACvC,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAAE,GAAEL,IAAK,EAAC,EAAE,IAAI,CAAC;MACzC,OAAOG,MAAM,CAACG,IAAI,CAACC,KAAK,CAACH,KAAK,CAAC,IAAID,MAAM,CAACK,OAAO,CAACD,KAAK,CAACH,KAAK,CAAC;IAChE,CAAC,CAAC;EACJ,CAAC;EAED,oBACE;IAAA,wBACA;MAAA,UAAI;IAAM;MAAA;MAAA;MAAA;IAAA,QAAK,eACf;MACE,SAAS,EAAE,QAAQ,IAAIK,SAAS,IAAI,EAAE,CAAE;MACxC,IAAI,EAAC,MAAM;MACX,KAAK,EAAEC,UAAW;MAClB,WAAW,EAAC;MACZ;MAAA;MACA,QAAQ,EAAGC,CAAC,IAAKZ,aAAa,CAACY,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;MAAA,GAC3CC;IAAU;MAAA;MAAA;MAAA;IAAA,QACd;EAAA;IAAA;IAAA;IAAA;EAAA,QAEI;AAEV;AAAC,GAnDe3B,UAAU;AAAA,KAAVA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
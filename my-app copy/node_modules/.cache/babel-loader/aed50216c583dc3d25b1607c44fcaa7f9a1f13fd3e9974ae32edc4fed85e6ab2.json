{"ast":null,"code":"var _jsxFileName = \"/Users/xiaotengzhang/Desktop/Se/codingExercise/my-app/src/components/Input/Input.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { Box } from \"@mui/system\";\nimport \"./Input.css\";\nimport { ResultsList } from \"../ResultsList/ResultsList\";\n\n/**\n * <Input\n *   className=\"MyInput\"\n *   data-something=\"Value\"\n *   value=\"Hello, World!\"\n *   onChange={(value) => console.log('You typed', value)}\n * />\n *\n * @prop {string} value The default value for the input.\n * @prop {string} placeholder The placeholder text.\n * @prop {Function} onChange Callback that will receive current input value.\n * @prop {mixed} ... All other props will be forwarded to the native DOM input.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Input(_ref) {\n  _s();\n  let {\n    options = [\"Oranges\", \"Apples\", \"Pearls\"]\n  } = _ref;\n  // const { className, value, onChange, ...otherProps } = props;\n  // const [inputValue, setInputValue] = useState(value);\n\n  // Keep the current value, unless the parent component supplies a different \"value\" prop.\n  // useEffect(() => {\n  //   setInputValue(value);\n  // }, [value]);\n\n  // function handleChange(event) {\n  //   setInputValue(event.target.value);\n  //   onChange && onChange(event.target.value);\n  // }\n\n  const [value, setValue] = useState(\"\");\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const suggestions = options.filter(option => option.toLowerCase().includes(value.toLowerCase()));\n  const autocompleteRef = useRef();\n  useEffect(() => {\n    const handleClick = event => {\n      if (autocompleteRef.current && !autocompleteRef.current.contains(event.target)) {\n        setShowSuggestions(false);\n      }\n    };\n    document.addEventListener(\"click\", handleClick);\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  }, []);\n  function handleChange(event) {\n    setInputValue(event.target.value);\n    onChange && onChange(event.target.value);\n  }\n  const handleSuggestionClick = suggetion => {\n    setValue(suggetion);\n    setShowSuggestions(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"autocomplete\",\n    ref: autocompleteRef,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Suburb\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"Input \" + (className || \"\"),\n      type: \"text\",\n      value: value,\n      placeholder: \"ABC Suburb Search\",\n      onChange: handleChange,\n      ...otherProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }, this), showSuggestions && /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"suggestions\",\n      children: suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleSuggestionClick(suggestion),\n        children: suggestion\n      }, suggestion, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(Input, \"l0VLzNd6lLaS6myG1nGouU/PZZ0=\");\n_c = Input;\nvar _c;\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"names":["React","useState","useEffect","useRef","TextField","Autocomplete","Box","ResultsList","Input","options","value","setValue","showSuggestions","setShowSuggestions","suggestions","filter","option","toLowerCase","includes","autocompleteRef","handleClick","event","current","contains","target","document","addEventListener","removeEventListener","handleChange","setInputValue","onChange","handleSuggestionClick","suggetion","className","otherProps","map","suggestion"],"sources":["/Users/xiaotengzhang/Desktop/Se/codingExercise/my-app/src/components/Input/Input.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { Box } from \"@mui/system\";\nimport \"./Input.css\";\nimport { ResultsList } from \"../ResultsList/ResultsList\"\n\n\n/**\n * <Input\n *   className=\"MyInput\"\n *   data-something=\"Value\"\n *   value=\"Hello, World!\"\n *   onChange={(value) => console.log('You typed', value)}\n * />\n *\n * @prop {string} value The default value for the input.\n * @prop {string} placeholder The placeholder text.\n * @prop {Function} onChange Callback that will receive current input value.\n * @prop {mixed} ... All other props will be forwarded to the native DOM input.\n */\nexport function Input({ options = [\"Oranges\", \"Apples\", \"Pearls\"] }) {\n  // const { className, value, onChange, ...otherProps } = props;\n  // const [inputValue, setInputValue] = useState(value);\n\n  // Keep the current value, unless the parent component supplies a different \"value\" prop.\n  // useEffect(() => {\n  //   setInputValue(value);\n  // }, [value]);\n\n  // function handleChange(event) {\n  //   setInputValue(event.target.value);\n  //   onChange && onChange(event.target.value);\n  // }\n\n  const [value, setValue] = useState(\"\");\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const suggestions = options.filter(option => option.toLowerCase().includes(value.toLowerCase()))\n  \n  const autocompleteRef = useRef();\n\n  useEffect(() => {\n      const handleClick = (event) => {\n          if (autocompleteRef.current && !autocompleteRef.current.contains(event.target)) {\n              setShowSuggestions(false)\n          }\n      };\n      document.addEventListener(\"click\", handleClick);\n      return () => {\n          document.removeEventListener(\"click\", handleClick)\n      }\n  }, [])\n\n  function handleChange(event) {\n    setInputValue(event.target.value);\n    onChange && onChange(event.target.value);\n  }\n\n  const handleSuggestionClick = (suggetion) => {\n      setValue(suggetion);\n      setShowSuggestions(false);\n  }\n\n  return (\n    <div className=\"autocomplete\" ref={autocompleteRef}>\n    <h2>Suburb</h2>\n    <input\n      className={\"Input \" + (className || \"\")}\n      type=\"text\"\n      value={value}\n      placeholder=\"ABC Suburb Search\"\n      onChange={handleChange}\n      {...otherProps}\n    />\n    {showSuggestions && (\n      <ul className=\"suggestions\">\n          {suggestions.map(suggestion => (\n              <li onClick={() => handleSuggestionClick(suggestion)} key={suggestion}>\n                  {suggestion}\n              </li>\n          ))}\n      </ul>\n    )}\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,YAAY,MAAM,4BAA4B;AACrD,SAASC,GAAG,QAAQ,aAAa;AACjC,OAAO,aAAa;AACpB,SAASC,WAAW,QAAQ,4BAA4B;;AAGxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAaA,OAAO,SAASC,KAAK,OAAgD;EAAA;EAAA,IAA/C;IAAEC,OAAO,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ;EAAE,CAAC;EACjE;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAMa,WAAW,GAAGL,OAAO,CAACM,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACR,KAAK,CAACO,WAAW,EAAE,CAAC,CAAC;EAEhG,MAAME,eAAe,GAAGhB,MAAM,EAAE;EAEhCD,SAAS,CAAC,MAAM;IACZ,MAAMkB,WAAW,GAAIC,KAAK,IAAK;MAC3B,IAAIF,eAAe,CAACG,OAAO,IAAI,CAACH,eAAe,CAACG,OAAO,CAACC,QAAQ,CAACF,KAAK,CAACG,MAAM,CAAC,EAAE;QAC5EX,kBAAkB,CAAC,KAAK,CAAC;MAC7B;IACJ,CAAC;IACDY,QAAQ,CAACC,gBAAgB,CAAC,OAAO,EAAEN,WAAW,CAAC;IAC/C,OAAO,MAAM;MACTK,QAAQ,CAACE,mBAAmB,CAAC,OAAO,EAAEP,WAAW,CAAC;IACtD,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,SAASQ,YAAY,CAACP,KAAK,EAAE;IAC3BQ,aAAa,CAACR,KAAK,CAACG,MAAM,CAACd,KAAK,CAAC;IACjCoB,QAAQ,IAAIA,QAAQ,CAACT,KAAK,CAACG,MAAM,CAACd,KAAK,CAAC;EAC1C;EAEA,MAAMqB,qBAAqB,GAAIC,SAAS,IAAK;IACzCrB,QAAQ,CAACqB,SAAS,CAAC;IACnBnB,kBAAkB,CAAC,KAAK,CAAC;EAC7B,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,cAAc;IAAC,GAAG,EAAEM,eAAgB;IAAA,wBACnD;MAAA,UAAI;IAAM;MAAA;MAAA;MAAA;IAAA,QAAK,eACf;MACE,SAAS,EAAE,QAAQ,IAAIc,SAAS,IAAI,EAAE,CAAE;MACxC,IAAI,EAAC,MAAM;MACX,KAAK,EAAEvB,KAAM;MACb,WAAW,EAAC,mBAAmB;MAC/B,QAAQ,EAAEkB,YAAa;MAAA,GACnBM;IAAU;MAAA;MAAA;MAAA;IAAA,QACd,EACDtB,eAAe,iBACd;MAAI,SAAS,EAAC,aAAa;MAAA,UACtBE,WAAW,CAACqB,GAAG,CAACC,UAAU,iBACvB;QAAI,OAAO,EAAE,MAAML,qBAAqB,CAACK,UAAU,CAAE;QAAA,UAChDA;MAAU,GAD4CA,UAAU;QAAA;QAAA;QAAA;MAAA,QAGxE;IAAC;MAAA;MAAA;MAAA;IAAA,QAEP;EAAA;IAAA;IAAA;IAAA;EAAA,QACK;AAEV;AAAC,GAhEe5B,KAAK;AAAA,KAALA,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}